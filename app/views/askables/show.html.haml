
- if current_user
  - @answerable = @askable.answerables.where(country_code: @country.code, user_id: current_user.id).first 
  - @is_owner = (current_user == @askable.owner)

- @answerable ||= @askable.is_a?(Poll) ? Ballot.new(vote: 0) : Answer.new

- content_for :title_string do
  #{ t 'country_title', :country_name => @country.to_s }:
  = @askable.body.truncate(80, :separator => ' ')

- content_for :js do
  = javascript_include_tag 'askable'
  
:css
  .ellips:after {
    content: "#{ t('askable.show.css.expand')}";
  }

#spbody
  .statuses
    .user.status.active
      = t('askable.show.created', link: user_country_flag_link(@askable.owner)).html_safe
    
    - unless in_original_lang(@askable)
      .status
        = t('askable.show.original')
        %a.link(href='#{ original_country_askable_path(@country, @askable) }' data-remote=true)
          %span.lang= t("language.code.#{ @orig_lang }").upcase
          %span.text= t("language.#{ @orig_lang }")
  
  #sph
    .flag
      %a(href='#{ country_path(@country) }' title='#{ @country.to_s }')
        = country_image @country, 'l', :size => '60x60'
    .blocks
      = render 'follow'
      .table.share
        .cell
          &#8618;
          = t 'askable.show.share'
          %a(href='#')<
            = image_tag '/assets/twitter.png'
          %a(href='#')
            = image_tag '/assets/facebook.png'
    
      = render 'answer_block'
    
    = render 'question'
        
    .actions
      %span.coverage
        = askable_coverage_info(@askable.coverage, @country)
    
      - if in_original_lang(@askable)
        - unless @langs.blank?  
          %span.translation(title='#{t("askable.show.is_orig_title")}')
            %span.lang= t("language.code.#{ @orig_lang }").upcase
            = t('askable.show.is_orig')
        
          %span.availables
            = image_tag '/assets/translation.png'
            = t('askable.show.available')
            - @langs.each do |l|
              %a(href='#')= t("language.code.#{ l }")
        
      - else
        %span.translation(title='#{ t("askable.show.t_from_to", to: t("language.#{ @askable.translation.locale }"), from: t("language.#{ @orig_lang }"))}')
          %span.lang<
            = t("language.code.#{ @askable.translation.locale }").upcase
          - if @askable.auto_translated.to_i > 0
            = t('askable.show.auto')
          - else
            Translation by
            = user_avatar_link(User.find(@askable.translation.versions.last.whodunnit), size: '20x20')


      %span.others
        %span.comments
          %a#ltac(href='#' onclick='aac.toggle_comments(); return false;')<
            = image_tag '/assets/comment.png'
            = t 'plural.comment', count: @askable.comment_threads.size
        
        - if can_edit
          %span.edit
            %a(href='#' onclick='aac.toggle_edit(); return false;')<
              = image_tag '/assets/edit.png'
              = t('edit')
      
        - if can_improve
          %span.translate
            = link_to_function t('askable.show.improve'), 'aac.toggle_edit(true)'

  = render 'askable_comments'
  = render 'answerable'
  
  #spb
    .rc
      - askables = @askable.more_askables
      
      - unless askables.blank?
        %h3 More questions
    
        %ul
          - askables.each do |a|
            %li= link_to a, country_askable_path(@country, a)
          
      -# %h2.page Contributors
      
      %h3
        Return to
        = link_to @country.to_s, country_path(@country)

    .lc
      = render "askable_answers"
            
